apiVersion: apps/v1 # API version being used
kind: Deployment # Type of Kubernetes object
metadata:
  name: webapp-deployment # Name of the deployment
  labels:
    app: webapp # Label to identify the app
spec:
  replicas: 1 # Number of pod replicas
  selector:
    matchLabels:
      app: webapp # Label selector to identify the pods
  template:
    metadata:
      labels:
        app: webapp # Label to identify the app
    spec:
      containers:
        - name: webapp # Name of the container
          image: docker-image # this name will be replaced in each push to the repository so that the latest image is always used
          ports:
            - containerPort: 3000 # Port to expose on the container. This must be the same as the target port in the service.
      # This specifies the secret to be used for pulling the Docker image from the private registry
      imagePullSecrets:
        - name: ionossecretasad

---

apiVersion: v1 # API version being used
kind: Service # Type of Kubernetes object
metadata:
  name: webapp-service # Name of the service
spec:
  type: NodePort
  selector:
    app: webapp # Label selector to identify the pods
  ports:
    - protocol: TCP # Protocol to be used
      port: 3000 # Port to expose on the service. This can be arbitrary
      targetPort: 3000 # Port to target on the pod. This must be the same as the port in the container. Such as 3000 is being used as the container port in the container. Through this port service will communicate with the pod.
      nodePort: 30001 # Node port to expose on the service. This can be arbitrary in between 30000-32767

---

apiVersion: v1 # API version being used
kind: Service # Type of Kubernetes object
metadata:
  name: webapp-internal-service # Name of the service
spec:
  type: ClusterIP # Default type, makes the service internal
  selector:
    app: webapp # Label selector to identify the pods
  ports:
    - protocol: TCP # Protocol to be used
      port: 3000 # Port to expose on the service. This can be arbitrary
      targetPort: 3000 # Port to target on the pod. This must be the same as the port in the container. Such as 3000 is being used as the container port in the container. Through this port service will communicate with the pod.